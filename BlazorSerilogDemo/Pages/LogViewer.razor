@page "/logviewer"
@inject LoggerService logService

<h3>LogViewer</h3>

<div class="container-fluid">
    <div class="input-group col-md-6">
        <input type="text" @bind="SearchLog" @bind:event="oninput" class="form-control" placeholder="Filter Levels">
        <div class="input-group-btn">
            <button @onclick="ClearFilter" class="btn-xs btn-info">Clear</button>
        </div>
    </div>
    <br />

    <div class="table-responsive row">
        <table class="table table-striped table-hover">
            <thead class="thead-dark">
                <tr>
                    <th>Level</th>
                    <th>When</th>
                    <th>Message</th>
                    <th></th>
                </tr>
            </thead>
            <tbody>
                @if (_logItems == null)
                {
                    <tr>
                        <td colspan="4">
                            <div class="spinner">
                                <div class="rect1"></div>
                                <div class="rect2"></div>
                                <div class="rect3"></div>
                                <div class="rect3"></div>

                            </div>
                        </td>
                    </tr>

                }
                else
                {
                    @foreach (var logItem in FilteredLogs)
                    {
                        <tr>
                            <td class="@logItem.Level">@logItem.Level</td>
                            <td>@logItem.TimeStamp.ToString("MM/dd/yyyy HH:mm:ss")</td>
                            <td>@logItem.Message</td>
                            <td class="row">
                                    <button @onclick="@(() => ShowDetail(logItem))" class="btn-xs btn-primary">view details</button>
                                </td>
                        </tr>
                    }
                }
            </tbody>
        </table>
    </div>

    <p>@_message</p>
</div>
@code {


    string SearchLog = "";
    private IEnumerable<LogItem> _logItems;

    private string _message = "";


    List<LogItem> FilteredLogs => _logItems
    .Where(i => i.Level.ToLower()
    .Contains(SearchLog.ToLower()))
    .ToList();

    void ClearFilter()
    {
        SearchLog = string.Empty;
    }

    protected override async Task OnInitializedAsync()
    {
        try
        {
            UpdateList();

        }
        catch (HttpRequestException ex)
        {
            _message = ($"There was a problem loading trail data: {ex.Message}");
            StateHasChanged();
        }
    }

    async Task ShowDetail(LogItem logItems)
    {

    }


    void UpdateList()
    {
        _logItems = logService.GetLastLogitems(10);
        this.StateHasChanged();
    }

}
