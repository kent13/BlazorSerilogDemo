@page "/logviewer"
@inject LoggerService logService

<h3>LogViewer</h3>


<div class="container-fluid">
    <h3>Breeds</h3>
    <div class="input-group col-md-6">
        <input type="text" @bind="SearchLog" @bind:event="oninput" class="form-control" placeholder="Filter">
        <div class="input-group-btn">
            <button @onclick="ClearFilter" class="btn-xs btn-info">Clear</button>
        </div>
    </div>
    <br />

    <div class="table-responsive row">
        <table class="table table-striped table-hover">
            <thead class="thead-dark">
                <tr>
                    <th>Name</th>
                    <th>Origin</th>
                    <th>AKC Group</th>
                    <th>AKC</th>
                    <th>UKC</th>
                </tr>
            </thead>
            <tbody>
                @if (_breeds == null)
                {
                    <tr>
                        <td colspan="4">
                            <div class="spinner">
                                <div class="rect1"></div>
                                <div class="rect2"></div>
                                <div class="rect3"></div>

                            </div>
                        </td>
                    </tr>

                }
                else
                {
                    @foreach (var logItem in FilteredLogs)
                    {
                        <tr>
                            <td>@logItem.Level</td>
                            <td>@logItem.TimeStamp</td>
                            <td>@logItem.Message</td>
                            @*<td class="row">
                                    <button @onclick="@(() => ShowEditBreed(breed))" class="btn-xs btn-primary">Edit</button>
                                </td>*@
                        </tr>
                    }
                }
            </tbody>
        </table>
    </div>

    <p>@_message</p>
</div>
@code {


    string SearchLog = "";
    private IEnumerable<LogItem> _breeds;

    private string _message = "";


    List<LogItem> FilteredLogs => _breeds
    .Where(i => i.Level.ToLower()
    .Contains(SearchLog.ToLower()))
    .ToList();

    void ClearFilter()
    {
        SearchLog = string.Empty;
    }

    protected override async Task OnInitializedAsync()
    {
        try
        {
            UpdateList();

        }
        catch (HttpRequestException ex)
        {
            _message = ($"There was a problem loading trail data: {ex.Message}");
            StateHasChanged();
        }
    }

    //async Task ShowEditBreed(Breed breed)
    //{
    //    var parameters = new ModalParameters();
    //    parameters.Add(nameof(BreedForm.breed), breed);

    //    var breedsModal = Modal.Show<BreedForm>("Breed", parameters);
    //    var result = await breedsModal.Result;

    //    if (!result.Cancelled)
    //    {
    //        await UpdateList();
    //        emptyBreed = new Breed();
    //        this.StateHasChanged();
    //    }
    //}


    void UpdateList()
    {
        _breeds = logService.GetLastLogitems(10);
        this.StateHasChanged();
    }

}
