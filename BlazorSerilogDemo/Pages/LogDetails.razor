
@page "/logDetails"
@page "/logDetails/{logItemId}"

@inject LoggerService logService
@inject NavigationManager NavigationManager

@using Serilog

<h3>LogDetails</h3>
<div class="row">
    <label>Level</label>
    <div class="detail">
        @logItem.Level
    </div>
</div>

<div class="row">
    <label>TimeStamp</label>
    <div class="detail">

        @logItem.TimeStamp
    </div>
</div>
<div class="row">
    <label>Message</label>
    <div class="detail">

        @logItem.Message
    </div>
</div>
<div class="row">
    <label>Exception</label>
    <div class="detail">
       @logItem.Exception

    </div>
</div>

<div class="row">
    <label>Properties</label>
    <div class="detail">
        @logItem.Properties
    </div>
</div>

<NavLink class="nav-link" href="logviewer">
    <span class="oi oi-plus"></span> Log Viewer
</NavLink>

@code {
    [Parameter]
    public string logItemId { get; set; }

    private LogItem logItem = new LogItem();

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            if (!string.IsNullOrEmpty(logItemId))
            {

                int id = 0;
                int.TryParse(logItemId, out id);
                try
                {
                    logItem = await logService.GetLogItemAsync(id);
                    if (string.IsNullOrWhiteSpace(logItem.Level))
                    {
                        NavigationManager.NavigateTo("/logViewer");
                    }
                    logItem.Exception = doReturns(logItem.Exception);
                    StateHasChanged();
                }
                catch (Exception ex)
                {
                    Log.Error("LogDetail error", ex);

                    NavigationManager.NavigateTo("/logViewer");
                }
            }
        }
    }

    private string doReturns(string inText)
    {
        var result = inText.Replace("\n", "<br />");

        return result;
    }
}
